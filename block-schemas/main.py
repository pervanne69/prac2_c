from graphviz import Digraph

def create_fork1():
    dot = Digraph(comment='fork1.c')
    dot.node('A', 'Start')
    dot.node('B', 'printf("I\'m the original process...")')
    dot.node('C', 'fork()')
    dot.node('D', 'Child process: printf("I\'m the child process...")')
    dot.node('E', 'Parent process: printf("I\'m the parent process...")\nprintf("My child\'s pid is...")')
    dot.node('F', 'printf("Pid ... terminates")')
    dot.node('G', 'End')

    dot.edges(['AB', 'BC'])
    dot.edge('C', 'D', label='pid == 0')
    dot.edge('C', 'E', label='pid > 0')
    dot.edge('D', 'F')
    dot.edge('E', 'F')
    dot.edge('F', 'G')
    dot.render('fork1', format='png', cleanup=True)

def create_fork2():
    dot = Digraph(comment='fork2.c')
    dot.node('A', 'Start')
    dot.node('B', 'printf("I\'m the original process...")')
    dot.node('C', 'fork()')
    dot.node('D', 'Child process:\nsleep(5)\nprintf("I\'m the child process...")\nprintf("was deserted")')
    dot.node('E', 'Parent process:\nprintf("I\'m the parent process...")\nprintf("My child\'s pid is...")')
    dot.node('F', 'printf("Pid ... terminates")')
    dot.node('G', 'End')

    dot.edges(['AB', 'BC'])
    dot.edge('C', 'D', label='pid == 0')
    dot.edge('C', 'E', label='pid > 0')
    dot.edge('D', 'F')
    dot.edge('E', 'F')
    dot.edge('F', 'G')
    dot.render('fork2', format='png', cleanup=True)

def create_myexec():
    dot = Digraph(comment='myexec.c')
    dot.node('A', 'Start')
    dot.node('B', 'printf("I\'m process of main program...")')
    dot.node('C', 'execl("/bin/ls", "ls", "-l", NULL)')
    dot.node('D', 'ls -l output')
    dot.node('E', 'printf("this line should never execute")')
    dot.node('F', 'End')

    dot.edges(['AB', 'BC'])
    dot.edge('C', 'D', label='Success')
    dot.edge('C', 'E', label='Error')
    dot.edge('D', 'F')
    dot.edge('E', 'F')
    dot.render('myexec', format='png', cleanup=True)

def create_redirect():
    dot = Digraph(comment='redirect.c')
    dot.node('A', 'Start')
    dot.node('B', 'Check argc < 3')
    dot.node('C', 'fprintf(stderr, "Usage: ...")')
    dot.node('D', 'fd = open(argv[1], O_CREAT | O_WRONLY | O_TRUNC, 0644)')
    dot.node('E', 'Check fd < 0')
    dot.node('F', 'perror("open")')
    dot.node('G', 'dup2(fd, STDOUT_FILENO)')
    dot.node('H', 'close(fd)')
    dot.node('I', 'execvp(argv[2], &argv[2])')
    dot.node('J', 'perror("main")')
    dot.node('K', 'End')

    dot.edge('A', 'B')
    dot.edge('B', 'C', label='Yes')
    dot.edge('B', 'D', label='No')
    dot.edge('D', 'E')
    dot.edge('E', 'F', label='Yes')
    dot.edge('E', 'G', label='No')
    dot.edge('G', 'H')
    dot.edge('H', 'I')
    dot.edge('I', 'J', label='Error')
    dot.edge('C', 'K')
    dot.edge('F', 'K')
    dot.edge('J', 'K')
    dot.edge('I', 'K')
    dot.render('redirect', format='png', cleanup=True)

def create_task():
    dot = Digraph(comment='task.c')
    dot.node('A', 'Start')
    dot.node('B', 'fork()')
    dot.node('C', 'Child process: for i=1..200 printf("child")')
    dot.node('D', 'Parent process: wait(NULL) for i=1..200 printf("parent")')
    dot.node('E', 'End')

    dot.edges(['AB'])
    dot.edge('B', 'C', label='pid == 0')
    dot.edge('B', 'D', label='pid > 0')
    dot.edge('C', 'E')
    dot.edge('D', 'E')
    dot.render('task', format='png', cleanup=True)

if __name__ == "__main__":
    create_fork1()
    create_fork2()
    create_myexec()
    create_redirect()
    create_task()
    print("All block diagrams generated as PNG files.")